# определение типа фигуры
def get_type(coord1, coord2):
    if coord1[0] == coord2[0] or coord1[1] == coord2[1]:
        return 'ладья'
    elif abs(coord1[0] - coord2[0]) == abs(coord1[1] - coord2[1]):
        return 'слон'
    elif coord1[0] == coord2[0] or coord1[1] == coord2[1] or abs(coord1[0] - coord2[0]) + abs(coord1[1] - coord2[1]) == 3:
        return 'конь'
    elif abs(coord1[0] - coord2[0]) <= 1 and abs(coord1[1] - coord2[1]) <= 1:
        return 'король'
    else:
        return 'ферзь' if abs(coord1[0] - coord2[0]) == abs(coord1[1] - coord2[1]) or coord1[0] == coord2[0] or coord1[1] == coord2[1] else None

# возможные ходы ладьи
def rook_moves(coord):
    return {(i, coord[1]) for i in range(1, 9)} | {(coord[0], i) for i in range(1, 9)}

# возможные ходы слона
def bishop_moves(coord):
    return {(coord[0] + i, coord[1] + i) for i in range(-7, 8)} | {(coord[0] + i, coord[1] - i) for i in range(-7, 8)}

# возможные ходы коня
def knight_moves(coord):
    return {(coord[0] + i, coord[1] + j) for i, j in [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)] if 1 <= coord[0] + i <= 8 and 1 <= coord[1] + j <= 8}

# возможные ходы короля
def king_moves(coord):
    return {(coord[0] + i, coord[1] + j) for i, j in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] if 1 <= coord[0] + i <= 8 and 1 <= coord[1] + j <= 8}

# возможные ходы ферзя
def queen_moves(coord):
    return rook_moves(coord) | bishop_moves(coord)

# возможные ходы для каждого типа фигур
def get_moves(coord, type):
    if type == 'ладья':
        return rook_moves(coord)
    elif type == 'слон':
        return bishop_moves(coord)
    elif type == 'конь':
        return knight_moves(coord)
    elif type == 'король':
        return king_moves(coord)
    elif type == 'ферзь':
        return queen_moves(coord)

# проверка возможности хода белой фигуры
def check_move(coord1, coord2, coord3, coord4):
    type1 = get_type(coord1, coord2)
    type2 = get_type(coord3, coord4)

    if not type1 or not type2:
        return 'Одна из фигур не распознана'

    moves = get_moves(coord1, type1)
    moves.discard(coord2)

    if type1 == 'конь':
        moves &= {coord3} | get_moves(coord3, type2)
    elif type1 == 'слон':
        if abs(coord1[0] - coord3[0]) == abs(coord1[1] - coord3[1]):
            if coord1[0] < coord3[0]:
                if coord1[1] < coord3[1]:
                    moves &= {(coord3[0] + i, coord3[1] + i) for i in range(-7 + coord3[0] - coord1[0], 8)}
                else:
                    moves &= {(coord3[0] + i, coord3[1] - i) for i in range(-7 + coord3[0] - coord1[0], 8)}
            else:
                if coord1[1] < coord3[1]:
                    moves &= {(coord3[0] - i, coord3[1] + i) for i in range(-7 + coord3[1] - coord1[1], 8)}
                else:
                    moves &= {(coord3[0] - i, coord3[1] - i) for i in range(-7 + coord3[1] - coord1[1], 8)}
        else:
            moves &= {(i, coord3[1]) for i in range(1, 9)} | {(coord3[0], i) for i in range(1, 9)}
    elif type1 == 'ладья':
        if coord1[0] == coord3[0]:
            if coord1[1] < coord3[1]:
                moves &= {(coord3[0], i) for i in range(coord1[1]+1, coord3[1])} 
            else:
                moves &= {(coord3[0], i) for i in range(coord3[1]+1, coord1[1])}
        else:
            if coord1[0] < coord3[0]:
                moves &= {(i, coord3[1]) for i in range(coord1[0]+1, coord3[0])} 
            else:
                moves &= {(i, coord3[1]) for i in range(coord3[0]+1, coord1[0])}
    
    if coord2 in get_moves(coord3, type2):
        return
# возможные ходы для слона и ферзя по диагонали
def get_diagonal_moves(coord):
    diag1 = {(coord[0] + i, coord[1] + i) for i in range(-7, 8)}
    diag2 = {(coord[0] + i, coord[1] - i) for i in range(-7, 8)}
    return diag1.union(diag2)

# возможные ходы для ладьи, ферзя и короля
def get_straight_moves(coord):
    row = {(i, coord[1]) for i in range(1, 9)}
    col = {(coord[0], i) for i in range(1, 9)}
    return row.union(col)

def get_king_moves(coord):
    moves = get_straight_moves(coord) | get_diagonal_moves(coord)
    moves.discard(coord)
    return moves

# возможные ходы для каждой фигуры
def get_moves(coord, type):
    if type == 'ладья':
        return get_straight_moves(coord)
    elif type == 'слон':
        return get_diagonal_moves(coord)
    elif type == 'конь':
        return {(coord[0]+i, coord[1]+j) for i, j in [(-2,-1), (-2,1), (-1,-2), (-1,2), (1,-2), (1,2), (2,-1), (2,1)] if 1 <= coord[0]+i <= 8 and 1 <= coord[1]+j <= 8}
    elif type == 'ферзь':
        return get_straight_moves(coord) | get_diagonal_moves(coord)
    elif type == 'король':
        return get_king_moves(coord)

# проверка возможности хода
def check_move(coord1, coord2, coord3, coord4):
    type1 = get_type(coord1, coord2)
    type2 = get_type(coord3, coord4)
    if not type1 or not type2:
        return 'Одна из фигур не распознана'

    white_moves = get_moves(coord1, type1)
    white_moves.discard(coord2)

    if type1 == 'конь':
        black_moves = get_moves(coord3, type2) | {coord3}
    elif type1 == 'слон':
        if abs(coord1[0] - coord3[0]) == abs(coord1[1] - coord3[1]):
            if coord1[0] < coord3[0]:
                if coord1[1] < coord3[1]:
                    black_moves = {(coord3[0] + i, coord3[1] + i) for i in range(-7 + coord3[0] - coord1[0], 8)}
                else:
                    black_moves = {(coord3[0] + i, coord3[1] - i) for i in range(-7 + coord3[0] - coord1[0], 8)}
            else:
                if coord1[1] < coord3[1]:
                    black_moves = {(coord3[0] - i, coord3[1] + i) for i in range(-7 + coord3[1] - coord1[1], 8)}
                else:
                    black_moves = {(coord3[0] - i, coord3[1] - i) for i in range(-7 + coord3[1] - coord1[1], 8)}
        else:
            black_moves = {(i, coord3[1]) for i in range(1, 9)} | {(coord3[0], i) for i in range(1, 9)}
    elif type1 == 'ладья':
        if coord1[0] == coord3[0]:
            if coord1[1] < coord3[1]:
                black_moves = {(coord3[0], i) for i in range(coord1[1]+1, coord3[1])} 
            else:
                black_moves = {(coord3[0], i) for i in range(coord3[1]+1, coord1[1])}
        else:
            if coord1[0] < coord3[0]:
                black_moves = {(i, coord3[1]) for i in range(coord1[0]+1, coord3[0])} 
            else:
                black_moves = {(i, coord3[1]) for i in range(coord3[0]+1, coord1[0])}
    elif type1 == 'ферзь':
        black_moves = get_moves(coord3, type2)

    if coord4 in black_moves:
        return 'Белая фигура не может сходить на заданную позицию'
    elif coord4 in white_moves:
        return 'Белая фигура может сходить на заданную позицию'
    else:
        return 'Белая фигура не может сходить на заданную позицию'

# тесты
print(check_move((1, 1), (1, 8), (8, 1), (8, 8))) # ладья и ладья (True)
print(check_move((1, 1), (1, 8), (7, 2), (3, 6))) # ладья и ферзь (True)
print(check_move((1, 1), (1, 8), (2, 3), (4, 2))) # ладья и
print(check_move((1, 1), (1, 8), (2, 7), (4, 8))) # ладья и слон (False)
print(check_move((1, 1), (1, 8), (2, 7), (3, 6))) # ладья и слон (True)
print(check_move((1, 1), (1, 8), (2, 7), (1, 6))) # ладья и слон (False)
print(check_move((1, 1), (1, 8), (3, 2), (2, 4))) # ладья и конь (True)
print(check_move((1, 1), (1, 8), (5, 1), (5, 3))) # ладья и король (True)

print(check_move((1, 1), (1, 8), (2, 7), (6, 3))) # ладья и ферзь (False)
print(check_move((1, 1), (1, 8), (1, 7), (3, 7))) # ладья (False)
print(check_move((1, 1), (1, 8), (6, 3), (5, 5))) # ферзь (True)
print(check_move((1, 1), (1, 8), (2, 3), (2, 5))) # ферзь (True)
print(check_move((1, 1), (1, 8), (2, 7), (2, 5))) # ферзь (True)
print(check_move((1, 8), (2, 6), (4, 7), (3, 5))) # конь (True)
print(check_move((1, 8), (2, 6), (4, 7), (4, 6))) # конь (False)
print(check_move((1, 8), (2, 6), (4, 7), (1, 5))) # конь (False)
print(check_move((1, 8), (2, 6), (4, 7), (2, 5))) # конь (True)
print(check_move((1, 8), (2, 6), (4, 7), (5, 8))) # конь (False)
print(check_move((1, 8), (2, 6), (4, 7), (1, 5))) # конь (False)
print(check_move((1, 8), (2, 6), (4, 7), (6, 5))) # конь (False)
print(check_move((1, 8), (2, 6), (4, 7), (5, 6))) # конь (False)
print(check_move((1, 8), (2, 6), (4, 7), (6, 7))) # конь (False)
print(check_move((1, 8), (2, 6), (4, 7), (3, 7))) # конь (False)
print(check_move((1, 8), (2, 6), (4, 7), (2, 7))) # конь (False)
print(check_move((1, 8), (2, 6), (4, 7), (1, 7))) # конь (False)
print(check_move((1, 8), (2, 6), (4, 7), (4, 8))) # конь (False)
print(check_move((1, 8), (2, 6), (4, 7), (4, 5))) # конь (False)
