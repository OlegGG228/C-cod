
# Исходный массив
arr = [11, 25, 43, 21, 65, 53, 25, 23, 33, 64, 14, 20, 33, 54, 41, 66, 64, 22, 44, 56, 55, 45]

# Функция проверки для первого случая, когда последняя цифра каждого числа соответствует количеству точек на правой половине кости домино
def is_domino_chain_1(arr):
    current_value = arr[0]
    for i in range(1, len(arr)):
        last_digit = current_value % 10 # получаем последнюю цифру текущего числа
        first_digit = arr[i] // 10 # получаем первую цифру следующего числа
        if last_digit != first_digit:
            return False
        current_value = arr[i]
    return True

# Функция проверки для второго случая, когда количеству точек на правой и левой половинах кости домино может соответствовать любая из цифр заданных чисел
def is_domino_chain_2(arr):
    current_value = arr[0]
    for i in range(1, len(arr)):
        last_digit = current_value % 10 # получаем последнюю цифру текущего числа
        first_digit = arr[i] // 10 # получаем первую цифру следующего числа
        second_digit = arr[i] % 10 # получаем последнюю цифру следующего числа
        if last_digit != first_digit and last_digit != second_digit:
            return False
        current_value = arr[i]
    return True

# Проверяем первый случай
if is_domino_chain_1(arr):
    print("Последовательность элементов массива соответствует ряду костей домино, выложенному по правилам игры (первый случай)")
else:
    print("Последовательность элементов массива не соответствует ряду костей домино, выложенному по правилам игры (первый случай)")

# Проверяем второй случай
if is_domino_chain_2(arr):
    print("Последовательность элементов массива соответствует ряду костей домино, выложенному по правилам игры (второй случай)")
else:
    print("Последовательность элементов массива не соответствует ряду костей домино, выложенному по правилам игры (второй случай)")

